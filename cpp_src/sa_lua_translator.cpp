/*
 * This file was auto-generated by speedy-antlr-tool v1.4.3
 *  https://github.com/amykyta3/speedy-antlr-tool
 */

#include "sa_lua_translator.h"


SA_LuaTranslator::SA_LuaTranslator(speedy_antlr::Translator *translator) {
    this->translator = translator;
}

SA_LuaTranslator::~SA_LuaTranslator() {
    Py_XDECREF(Start_Context_cls);
    Py_XDECREF(ChunkContext_cls);
    Py_XDECREF(BlockContext_cls);
    Py_XDECREF(StatContext_cls);
    Py_XDECREF(AttnamelistContext_cls);
    Py_XDECREF(AttribContext_cls);
    Py_XDECREF(RetstatContext_cls);
    Py_XDECREF(LabelContext_cls);
    Py_XDECREF(FuncnameContext_cls);
    Py_XDECREF(VarlistContext_cls);
    Py_XDECREF(NamelistContext_cls);
    Py_XDECREF(ExplistContext_cls);
    Py_XDECREF(ExpContext_cls);
    Py_XDECREF(VarContext_cls);
    Py_XDECREF(PrefixexpContext_cls);
    Py_XDECREF(FunctioncallContext_cls);
    Py_XDECREF(ArgsContext_cls);
    Py_XDECREF(FunctiondefContext_cls);
    Py_XDECREF(FuncbodyContext_cls);
    Py_XDECREF(ParlistContext_cls);
    Py_XDECREF(TableconstructorContext_cls);
    Py_XDECREF(FieldlistContext_cls);
    Py_XDECREF(FieldContext_cls);
    Py_XDECREF(FieldsepContext_cls);
    Py_XDECREF(NumberContext_cls);
    Py_XDECREF(StringContext_cls);
}


antlrcpp::Any SA_LuaTranslator::visitStart_(LuaParser::Start_Context *ctx){
    if(!Start_Context_cls) Start_Context_cls = PyObject_GetAttrString(translator->parser_cls, "Start_Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Start_Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitChunk(LuaParser::ChunkContext *ctx){
    if(!ChunkContext_cls) ChunkContext_cls = PyObject_GetAttrString(translator->parser_cls, "ChunkContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ChunkContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitBlock(LuaParser::BlockContext *ctx){
    if(!BlockContext_cls) BlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "BlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitStat(LuaParser::StatContext *ctx){
    if(!StatContext_cls) StatContext_cls = PyObject_GetAttrString(translator->parser_cls, "StatContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StatContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitAttnamelist(LuaParser::AttnamelistContext *ctx){
    if(!AttnamelistContext_cls) AttnamelistContext_cls = PyObject_GetAttrString(translator->parser_cls, "AttnamelistContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AttnamelistContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitAttrib(LuaParser::AttribContext *ctx){
    if(!AttribContext_cls) AttribContext_cls = PyObject_GetAttrString(translator->parser_cls, "AttribContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AttribContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitRetstat(LuaParser::RetstatContext *ctx){
    if(!RetstatContext_cls) RetstatContext_cls = PyObject_GetAttrString(translator->parser_cls, "RetstatContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RetstatContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitLabel(LuaParser::LabelContext *ctx){
    if(!LabelContext_cls) LabelContext_cls = PyObject_GetAttrString(translator->parser_cls, "LabelContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LabelContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitFuncname(LuaParser::FuncnameContext *ctx){
    if(!FuncnameContext_cls) FuncnameContext_cls = PyObject_GetAttrString(translator->parser_cls, "FuncnameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FuncnameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitVarlist(LuaParser::VarlistContext *ctx){
    if(!VarlistContext_cls) VarlistContext_cls = PyObject_GetAttrString(translator->parser_cls, "VarlistContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VarlistContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitNamelist(LuaParser::NamelistContext *ctx){
    if(!NamelistContext_cls) NamelistContext_cls = PyObject_GetAttrString(translator->parser_cls, "NamelistContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NamelistContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitExplist(LuaParser::ExplistContext *ctx){
    if(!ExplistContext_cls) ExplistContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExplistContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExplistContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitExp(LuaParser::ExpContext *ctx){
    if(!ExpContext_cls) ExpContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitVar(LuaParser::VarContext *ctx){
    if(!VarContext_cls) VarContext_cls = PyObject_GetAttrString(translator->parser_cls, "VarContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VarContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitPrefixexp(LuaParser::PrefixexpContext *ctx){
    if(!PrefixexpContext_cls) PrefixexpContext_cls = PyObject_GetAttrString(translator->parser_cls, "PrefixexpContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PrefixexpContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitFunctioncall(LuaParser::FunctioncallContext *ctx){
    if(!FunctioncallContext_cls) FunctioncallContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctioncallContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctioncallContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitArgs(LuaParser::ArgsContext *ctx){
    if(!ArgsContext_cls) ArgsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ArgsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ArgsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitFunctiondef(LuaParser::FunctiondefContext *ctx){
    if(!FunctiondefContext_cls) FunctiondefContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctiondefContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctiondefContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitFuncbody(LuaParser::FuncbodyContext *ctx){
    if(!FuncbodyContext_cls) FuncbodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "FuncbodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FuncbodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitParlist(LuaParser::ParlistContext *ctx){
    if(!ParlistContext_cls) ParlistContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParlistContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParlistContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitTableconstructor(LuaParser::TableconstructorContext *ctx){
    if(!TableconstructorContext_cls) TableconstructorContext_cls = PyObject_GetAttrString(translator->parser_cls, "TableconstructorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TableconstructorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitFieldlist(LuaParser::FieldlistContext *ctx){
    if(!FieldlistContext_cls) FieldlistContext_cls = PyObject_GetAttrString(translator->parser_cls, "FieldlistContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FieldlistContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitField(LuaParser::FieldContext *ctx){
    if(!FieldContext_cls) FieldContext_cls = PyObject_GetAttrString(translator->parser_cls, "FieldContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FieldContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitFieldsep(LuaParser::FieldsepContext *ctx){
    if(!FieldsepContext_cls) FieldsepContext_cls = PyObject_GetAttrString(translator->parser_cls, "FieldsepContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FieldsepContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitNumber(LuaParser::NumberContext *ctx){
    if(!NumberContext_cls) NumberContext_cls = PyObject_GetAttrString(translator->parser_cls, "NumberContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NumberContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_LuaTranslator::visitString(LuaParser::StringContext *ctx){
    if(!StringContext_cls) StringContext_cls = PyObject_GetAttrString(translator->parser_cls, "StringContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StringContext_cls);
    return py_ctx;
}
